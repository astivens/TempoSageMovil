import 'package:flutter/material.dart';
import 'package:temposage/core/services/recommendation_service.dart';
import 'package:temposage/core/utils/logger.dart';
import 'package:intl/intl.dart';

/// Script de prueba para verificar el funcionamiento del modelo ML
/// Ejecutar con: flutter run test/ml_test.dart
void main() async {
  // Asegurarnos de que Flutter est√© inicializado para cargar assets
  WidgetsFlutterBinding.ensureInitialized();

  // Configurar nivel de log para ver m√°s detalles
  final logger = Logger('ML_TEST');
  Logger.instance.setMinLevel(LogLevel.debug);
  Logger.instance.setVerboseMode(true);

  logger.i('‚ö° Iniciando prueba de integraci√≥n ML...');

  // Inicializar el servicio que contiene la integraci√≥n ML
  logger.i('‚öôÔ∏è Inicializando servicio de recomendaciones...');

  final recommendationService = RecommendationService();

  try {
    // Inicializar el servicio
    await recommendationService.initialize();
    logger.i('‚úÖ Servicio de recomendaciones inicializado correctamente');

    // Lista de tareas de prueba con diferentes caracter√≠sticas
    final testTasks = [
      "Preparar informe de ventas trimestral para la reuni√≥n del viernes",
      "Estudiar para el examen de matem√°ticas",
      "Hacer ejercicio en el gimnasio durante una hora",
      "Limpiar la casa antes de que lleguen los invitados",
      "Programar la aplicaci√≥n m√≥vil para el cliente nuevo"
    ];

    // Ejecutar predicciones para cada tarea de prueba
    for (final taskDescription in testTasks) {
      logger.i('üîç Probando tarea: "$taskDescription"');

      try {
        // Obtener predicci√≥n
        final prediction = await recommendationService.predictTaskDetails(
          description: taskDescription,
          estimatedDuration: 60.0,
        );

        // Mostrar resultados
        logger.i('üìä Resultado:');
        logger.i('   - Categor√≠a: ${prediction.category}');
        logger.i('   - Duraci√≥n estimada: ${prediction.estimatedDuration} min');

        if (prediction.suggestedDateTime != null) {
          final formatter = DateFormat('E, HH:mm');
          logger.i(
              '   - Hora sugerida: ${formatter.format(prediction.suggestedDateTime!)}');
        } else {
          logger.i('   - No hay hora sugerida disponible');
        }

        // Verificar si se us√≥ fallback
        if (prediction.category == 'Desconocida') {
          logger.w('‚ö†Ô∏è Parece que se utiliz√≥ la l√≥gica de fallback');
        } else {
          logger.i('‚úÖ Predicci√≥n generada por el modelo ML');

          // Informaci√≥n adicional sobre los bloques sugeridos
          if (prediction.suggestedBlocks.isNotEmpty) {
            logger.i('üìã Bloques productivos sugeridos:');
            for (final block in prediction.suggestedBlocks) {
              logger.i('   - ${block.toString()}');
            }
          } else {
            logger.w('‚ö†Ô∏è No se encontraron bloques productivos sugeridos');
          }
        }
      } catch (e, stackTrace) {
        logger.e('‚ùå Error al procesar tarea: "$taskDescription"',
            error: e, stackTrace: stackTrace);
      }
    }
  } catch (e, stackTrace) {
    logger.e('‚ùå Error en la prueba de integraci√≥n ML',
        error: e, stackTrace: stackTrace);
  } finally {
    logger.i('üèÅ Prueba completada');
    logger.i('üßπ Recursos liberados');
  }
}
