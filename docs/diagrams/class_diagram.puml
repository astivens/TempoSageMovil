@startuml TempoSage_Class_Diagram
!theme plain
skinparam backgroundColor #FFFFFF
skinparam defaultFontSize 10
skinparam classFontSize 10
skinparam classAttributeFontSize 9
skinparam packageFontSize 11

' Colores específicos para cada capa
skinparam package {
    BackgroundColor #F8F9FA
    BorderColor #495057
    FontColor #212529
}

' Core Layer - Azul
skinparam class {
    BackgroundColor<<Core>> #E3F2FD
    BorderColor<<Core>> #1976D2
    FontColor<<Core>> #0D47A1
}

' Domain Layer - Verde
skinparam class {
    BackgroundColor<<Domain>> #E8F5E8
    BorderColor<<Domain>> #388E3C
    FontColor<<Domain>> #1B5E20
}

' Data Layer - Naranja
skinparam class {
    BackgroundColor<<Data>> #FFF3E0
    BorderColor<<Data>> #F57C00
    FontColor<<Data>> #E65100
}

' Presentation Layer - Púrpura
skinparam class {
    BackgroundColor<<Presentation>> #F3E5F5
    BorderColor<<Presentation>> #7B1FA2
    FontColor<<Presentation>> #4A148C
}

' Services Layer - Rojo
skinparam class {
    BackgroundColor<<Services>> #FFEBEE
    BorderColor<<Services>> #C62828
    FontColor<<Services>> #B71C1C
}

skinparam classArrowColor #495057

' Layout optimizado para relación 1:1
!define RECTANGLE class
skinparam minClassWidth 120
skinparam maxMessageSize 150

title Diagrama de Clases - TempoSage\nArquitectura Limpia con Diferenciación Visual

' ===========================================
' CORE LAYER (Superior Izquierda)
' ===========================================
package "Core Layer" as core #E3F2FD {
    
    abstract class LocalStorage <<Core>> {
        +getBox<T>(): Future<Box<T>>
        +getAllData<T>(): Future<List<T>>
        +saveData<T>(): Future<void>
        +deleteData(): Future<void>
    }
    
    class ServiceLocator <<Core>> {
        -{static} instance
        +getActivityRepository()
        +getTimeBlockRepository()
        +getHabitRepository()
    }
    
    class Logger <<Core>> {
        +{static} instance
        +i(message, tag): void
        +e(message, tag, error): void
        +d(message, tag): void
    }
    
    abstract class ErrorHandler <<Core>> {
        +{static} logError(): void
        +{static} handleError(): String
    }
}

' ===========================================
' DOMAIN LAYER (Superior Derecha)
' ===========================================
package "Domain Layer" as domain #E8F5E8 {
    
    ' Entities
    class Activity <<Domain>> {
        +id: String
        +name: String
        +date: DateTime
        +category: String
        +isCompleted: bool
    }
    
    class Habit <<Domain>> {
        +id: String
        +name: String
        +daysOfWeek: List<String>
        +category: String
        +time: String
        +isDone: bool
        +copyWith(): Habit
    }
    
    ' Repository Abstractions
    abstract class HabitRepository <<Domain>> {
        +getAllHabits(): Future<List<Habit>>
        +addHabit(habit): Future<void>
        +updateHabit(habit): Future<void>
        +deleteHabit(id): Future<void>
    }
    
    ' Use Cases
    class GetHabitsUseCase <<Domain>> {
        -repository: HabitRepository
        +execute(): Future<List<Habit>>
    }
    
    class PredictProductivityUseCase <<Domain>> {
        -apiService: TempoSageApiService
        +execute(): Future<Map>
    }
    
    class HabitToTimeBlockService <<Domain>> {
        -timeBlockRepository
        +planificarBloques(): Future<int>
    }
}

' ===========================================
' DATA LAYER (Centro)
' ===========================================
package "Data Layer" as data #FFF3E0 {
    
    ' Models
    class HabitModel <<Data>> {
        <<HiveType>>
        +id: String
        +title: String
        +description: String
        +daysOfWeek: List<String>
        +isCompleted: bool
        +copyWith(): HabitModel
        +toJson(): Map
    }
    
    class ActivityModel <<Data>> {
        <<freezed>>
        +id: String
        +title: String
        +category: String
        +startTime: DateTime
        +endTime: DateTime
        +isCompleted: bool
        +toggleCompletion(): ActivityModel
    }
    
    class TimeBlockModel <<Data>> {
        <<HiveType>>
        +id: String
        +title: String
        +startTime: DateTime
        +endTime: DateTime
        +category: String
        +isFocusTime: bool
        +isCompleted: bool
    }
    
    class TaskModel <<Data>> {
        <<freezed>>
        +id: String
        +title: String
        +isCompleted: bool
        +createdAt: DateTime
        +subtasks: List<SubtaskModel>
    }
    
    ' Repository Implementations
    class HabitRepositoryImpl <<Data>> {
        -{static} _boxName: String
        +getAllHabits(): Future<List<Habit>>
        +addHabit(): Future<void>
        +updateHabit(): Future<void>
        +deleteHabit(): Future<void>
    }
    
    class TimeBlockRepository <<Data>> {
        +getAllTimeBlocks(): Future<List>
        +addTimeBlock(): Future<void>
        +updateTimeBlock(): Future<void>
    }
}

' ===========================================
' PRESENTATION LAYER (Inferior Izquierda)
' ===========================================
package "Presentation Layer" as presentation #F3E5F5 {
    
    ' State Management
    class HabitState <<Presentation>> {
        <<freezed>>
        +initial(): HabitState
        +loading(): HabitState
        +loaded(): HabitState
        +error(): HabitState
    }
    
    class HabitCubit <<Presentation>> {
        +repository: HabitRepository
        +getHabitsForToday(): Future<void>
        +completeHabit(): Future<void>
        +createHabit(): Future<void>
    }
    
    class DashboardController <<Presentation>> {
        -_activityRepository
        -_habitRepository
        -_isLoading: bool
        +refreshDashboard(): Future<void>
        +getTodayActivities(): List
        +predictProductivity(): Future<void>
    }
    
    class TaskCubit <<Presentation>> {
        -_repository: TaskRepository
        +loadTasks(): Future<void>
        +createTask(): Future<void>
        +toggleTaskCompletion(): Future<void>
    }
}

' ===========================================
' SERVICES LAYER (Inferior Derecha)
' ===========================================
package "Services Layer" as services #FFEBEE {
    
    class RecommendationService <<Services>> {
        -_logger: Logger
        +getActivityRecommendations(): Future<List>
        +getHabitRecommendations(): Future<List>
        +analyzeUserPatterns(): Future<Map>
    }
    
    class TempoSageApiService <<Services>> {
        +predictProductivity(): Future<Map>
        +suggestOptimalTime(): Future<List>
        +analyzePatterns(): Future<Map>
    }
    
    class NotificationService <<Services>> {
        +scheduleNotification(): Future<void>
        +cancelNotification(): Future<void>
        +cancelAllNotifications(): Future<void>
    }
}

' ===========================================
' RELATIONSHIPS OPTIMIZADAS
' ===========================================

' Core relationships
ServiceLocator .down.> HabitRepositoryImpl
ServiceLocator .down.> TimeBlockRepository
ServiceLocator .right.> TempoSageApiService

' Domain to Data
HabitRepository <|.down. HabitRepositoryImpl
GetHabitsUseCase .right.> HabitRepository
PredictProductivityUseCase .down.> TempoSageApiService
HabitToTimeBlockService .down.> TimeBlockRepository

' Data relationships
HabitRepositoryImpl .up.> LocalStorage
TimeBlockRepository .up.> LocalStorage
HabitRepositoryImpl .right.> HabitModel
HabitRepositoryImpl .left.> Habit

' Presentation relationships
HabitCubit .up.> HabitRepository
HabitCubit .left.> HabitState
DashboardController .up.> PredictProductivityUseCase
TaskCubit .up.> TaskModel

' Services relationships
RecommendationService .up.> Logger
HabitToTimeBlockService .right.> TimeBlockRepository

' Inheritance relationships (simplificadas)
HabitCubit --|> "Cubit<HabitState>"
DashboardController --|> "ChangeNotifier"
HabitModel --|> "HiveObject"
TimeBlockModel --|> "HiveObject"

@enduml 